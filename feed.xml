<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://kai-tub.github.io/master-thesis-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kai-tub.github.io/master-thesis-blog/" rel="alternate" type="text/html" /><updated>2020-09-02T11:11:30-05:00</updated><id>https://kai-tub.github.io/master-thesis-blog/feed.xml</id><title type="html">Kais Machine Learning Master Thesis Blog</title><subtitle>Remote image sensing and self-supervision master thesis blog</subtitle><entry><title type="html">Introduction to grayscale images</title><link href="https://kai-tub.github.io/master-thesis-blog/images/2020/09/02/introduction.html" rel="alternate" type="text/html" title="Introduction to grayscale images" /><published>2020-09-02T00:00:00-05:00</published><updated>2020-09-02T00:00:00-05:00</updated><id>https://kai-tub.github.io/master-thesis-blog/images/2020/09/02/introduction</id><content type="html" xml:base="https://kai-tub.github.io/master-thesis-blog/images/2020/09/02/introduction.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-09-02-introduction.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;About&quot;&gt;About&lt;a class=&quot;anchor-link&quot; href=&quot;#About&quot;&gt; &lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Before we can dive into multi-spectral satellite images, I think a quick refresher on how images
are encoded and represented in memory is a good starting point.&lt;/p&gt;
&lt;h2 id=&quot;Binary-encoding&quot;&gt;Binary encoding&lt;a class=&quot;anchor-link&quot; href=&quot;#Binary-encoding&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let's take a short recap of how classical computer vision images are encoded in memory.
Internally a computer (ignoring quantum-computing) only works with binary numbers. A binary number is either a 0 or a 1, on or off.
The value of such a binary number is called a &lt;em&gt;bit&lt;/em&gt;.
The smallest data-element is called a &lt;em&gt;byte&lt;/em&gt;. A byte consists of 8 bits.
There are different ways how we could use these 8 bits/1 byte to encode our data.
The data we are trying to store/load defines how we interpret the data. 
If we want to only work with positive integers, we use an unsigned integer type.
An unsigned integer with 8 bits can encode all numbers from 0$-$255&lt;sup id=&quot;fnref-1&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.
If all bits are 1, also called &lt;em&gt;set&lt;/em&gt;, the value is 255.
If all bits are 0 the corresponding value is 0.
&lt;!-- Show image of bits on/off --&gt;&lt;/p&gt;
&lt;h2 id=&quot;Grayscale-images&quot;&gt;Grayscale images&lt;a class=&quot;anchor-link&quot; href=&quot;#Grayscale-images&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Images, like everything in a computer, are also only encoded in binary values.
The simplest images are grayscale images. The possible colors of each pixel of grayscale images only range from black to gray to white, with all different gray shades in-between. 
&lt;em&gt;Pixels&lt;/em&gt; are the basic elements of a picture. The word itself, &lt;a href=&quot;https://en.wikipedia.org/wiki/Pixel#Etymology&quot;&gt;pixel&lt;/a&gt;, is a combination of the words picture and element/cell. So an image consists of pixels similar to how a brick wall consists of bricks.&lt;/p&gt;
&lt;table align=&quot;center&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;2020-09-02/brick.jpg&quot; width=&quot;224&quot; height=&quot;224&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;&lt;img src=&quot;2020-09-02/brick-wall.jpg&quot; width=&quot;224&quot; height=&quot;224&quot; /&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
     &lt;td align=&quot;center&quot;&gt;Pixel&lt;/td&gt;
     &lt;td align=&quot;center&quot;&gt;Full Image&lt;/td&gt;
  &lt;/tr&gt;
 &lt;/table&gt;&lt;p&gt;With the knowledge of our previous simple encoding scheme, we can understand how simply 8-bit grayscale images are encoded.
The 8-bit refers to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Color_depth&quot;&gt;&lt;em&gt;color-depth&lt;/em&gt;&lt;/a&gt;. It indicates how many bits are used per channel.
For a grayscale image, we only have a single channel, the channel ranging from black to white. (We will take a closer look at different channels in the next post.)
For now, we note that our grayscale channel is encoded with 8-bits. Or, but differently, we use 8-bits for every pixel to show different shades of gray. With 8-bits we can color each pixel in 256 (2⁸) different ways.
&lt;!-- Show a couple of different shades of gray --&gt;&lt;/p&gt;
&lt;p&gt;Until now, we did not care about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Image_resolution#Pixel_resolution&quot;&gt;resolution&lt;/a&gt; of our images. 
The resolution defines how many pixels we use to visualize the object. A resolution of 1 corresponds to a single pixel.
But, with a single-pixel picture, we cannot retain a lot of information besides a single shade of gray.
So let's increase our resolution for the following images to a width of 224 pixels times a height of 224 pixels.
With more pixels we can show more levels of detail.
&lt;!-- Show some gradients and an image of an alien --&gt;&lt;/p&gt;
&lt;p&gt;Even if these images reveal a lot of information to us humans, in the end, they are only stored as 0s and 1s on the computer.
Increasing the number of pixels (resolution), allows us to encode more details. The color-depth shows us how many bits
we use per channel to encode a color. Our previous 8-bit grayscale pixel can, therefore, encode 256 different shades of gray.
But what is when we want to enrich our image with colors?&lt;/p&gt;
&lt;p&gt;How to add colors to our image and how remote image sensing images are different will be the topic of the next blog post!&lt;/p&gt;
&lt;p&gt;Until then, have a productive time! :+1:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;div class=&quot;footnotes&quot;&gt;&lt;p id=&quot;fn-1&quot;&gt;1. A quick refresher on how to translate binary numbers to unsigned integers can be found on &lt;a href=&quot;https://ryanstutorials.net/binary-tutorial/&quot;&gt;ryanstutorials&lt;/a&gt;&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote footnotes&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry></feed>