{
  
    
        "post0": {
            "title": "Color widgets",
            "content": "About . In the previous two posts we looked at grayscale images, which used a single channel, RGB images with three channels and at multi-spectral images with various channels. I provided Python image generating code so you could copy and execute the code locally or run the notebook via the badges on binder or Colab. Although, this could be valueable for people with the relevant background knowledge or extra time, it may leave out some people. In my opinion, it is crucial to visualize and interact with technical topics to get a better feel for it or to be able to look at it from a different angle. . Therefore, I will try to introduce some widgets from time to time. Due to hosting limitations, these will be slow and may not look as polished but they are free of charge for me and allow you to interact with the written widgets. :) . It took me some time to find a viable solution, so I will show both widgets here for quick access, but I will also add them to the previous posts. .",
            "url": "https://kai-tub.github.io/master-thesis-blog/widgets/2020/10/04/color-widgets.html",
            "relUrl": "/widgets/2020/10/04/color-widgets.html",
            "date": " • Oct 4, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Introduction to multi-channel images",
            "content": "About . In the previous post, we took a closer look at grayscale images and how they are encoded on the computer. But these types of images are boring... Images with color are nicer to look at and carry more information for us. In the following, we will examine RGB images and what the difference is between those images and multi-spectral images. . Short recap: Grayscale images . To summarize our findings from the previous post: We have seen that every image consists of pixels. These pixels are nothing more than numbers stored as binary values on the disk. Depending on how many bits we use per pixel, we can tune the number of distinct colors (color-depth). Besides adjusting the color-depth, we also tuned the resolution. With a higher resolution, we can show more details. Remember, with a single pixel, we can only encode a single color, but with many pixels, we can capture scenes and objects! . RGB images . So how do we add color information to our images? If we think back to art class, we may remember primary colors. Red, green, and blue can be combined to create any color. Because we work with displays and light emitting from them, we additively mix the primary colors.1 Each of these three colors has its own channel. In the previous grayscale examples, there was only a single channel for our gray values. Now we use three channels instead of one. These three channels are combined and presented to us in an additive manner. A close-up image of an LCD screen helps us to understand how we create colors on our screen. . Subpixels of an LCD monitor (Image from Robnil01, Wikimedia) Our color values are once again only binary values on our disk. But if we show them on our LCD screen, each pixel has a red, green, and blue subpixel, which are combined to show us the color we want. Now let&#39;s start to program and see if we can mix some colors with Python! . Note: Now there are different places where we could put the color channel dimension. Sadly, almost every library has a different definition of where the color channel, height, and width dimension should be. So always check the library you are using to see how you should lay out the data. Otherwise, you will not get the results you expect! PIL assumes the following order: W x H x C . #collapse import numpy as np from PIL import Image, ImageOps def to_rgb_image(x): return Image.fromarray(x, mode=&quot;RGB&quot;) def upscale_image(img, img_width=224, img_height=224): return img.resize((img_width, img_height), resample=Image.NEAREST) # Let&#39;s start with a single pixel but with three channels! # Btw do not forget to set dtype, otherwise the colors will be wrong ;) img_values = { &quot;pixel_red&quot;: np.array([255, 0, 0], dtype=np.uint8).reshape(1, 1, 3), &quot;pixel_green&quot;: np.array([0, 255, 0], dtype=np.uint8).reshape(1, 1, 3), &quot;pixel_blue&quot;: np.array([0, 0, 255], dtype=np.uint8).reshape(1, 1, 3), } for name, value in img_values.items(): img = to_rgb_image(value) img = upscale_image(img) bordered_img = ImageOps.expand(img, border=1, fill=&quot;black&quot;) . . Channel 0 -- Red Channel 1 -- Green Channel 2 -- Blue Visualization of primary color pixels Now that we have the three primary colors, we can mix them to get almost any color! Here are some examples: . #collapse pixel_values = { &quot;black&quot;: [0, 0, 0], &quot;white&quot;: [255, 255, 255], &quot;red_and_green&quot;: [255, 255, 0], &quot;green_and_blue&quot;: [0, 255, 255], &quot;all_150&quot;: [150, 150, 150], } for name, p_val in pixel_values.items(): img = to_rgb_image( np.array(p_val, dtype=np.uint8).reshape(1, 1, 3) ) img = upscale_image(img) bordered_img = ImageOps.expand(img, border=1, fill=&quot;black&quot;) . . All values 0 All values 255 All values 150 Red &amp; Green 255 Green &amp; Blue 255 Visualization of different color values If we don&#39;t limit ourselves to a single pixel, we can visualize vibrant images, showing us many different objects and scenes. With the extra color information, we can more easily differentiate objects, like flowers or fruits. . Grayscale image RGB image Image with RGB colors vs. grayscale image In the computer vision field, most architectures also work with RGB images. These are the types of images we usually use for everything. The extra color information helps machine learning researches to increase the accuracy of the predictions further. It seems reasonable for us humans to assume that color information improves the prediction performance because it is easier to identify objects if we add color to the image. But for the computer, these are once again nothing more than 0s and 1s. So what would happen if we add more channels? . Before we move on, let&#39;s summarize what we have learned so far. . Summary . To summarize the previous section: The LCD screens we are looking at combine red, green, and blue subpixels in each pixel to transform the binary values into colors. These three colors are used because they are primary colors and can be additively combined to create any color. On disk, these values are still nothing more than binary numbers. But now we have three channels and, therefore, three times as many bytes per image compared to a grayscale image. For a 28 x 28 pixels image, we now have 28 x 28 x 3 x color-depth bytes. The extra color information helps us (and neural networks) to identify and differentiate objects. . Introduction to remote sensing images . In the previous section, we saw how different a grayscale image looks from an RGB image and that it is easier for us to identify and differentiate colored objects. The same holds for neural networks! In the computer vision setting, images are used as input, and the network takes some action based on it. For example, we could use it to predict a specific class (dog or cat) or transform the picture (remove people from the scenery). But what would happen if we add more channels? Would the prediction performance still increase? . In a field called remote sensing we sometimes use multi-spectral images as input images. After Wikipedia, remote sensing is: . In current usage, the term &quot;remote sensing&quot; generally refers to the use of satellite or aircraft-based sensor technologies to detect and classify objects on Earth. . So the images used in remote sensing could be classic RGB images from drones used to classify different objects. Here the classes could be building, car, forest, water, fields, etc. With the introduction of Deep Learning and neural networks in the field, the processing of a different image type is gaining popularity:multi-spectral images. To answer what multi-spectral images are, let&#39;s take a step back and think about how our RGB images are displayed on an LCD screen. We know that each pixel uses subpixels to add them together to a color. The subpixel shines in a single color. More accurately, the subpixel emits electromagnetic waves in a specific wavelength in the spectrum of visible light. Here, visible refers to a spectrum we humans can perceive. . Electromagnetic spectrum (Image from Wikipedia) A blue subpixel mostly emits an electromagnetic wave with a wavelength of around 470nm, which we perceive as blue. That means that the LCD screen does not add the different wavelengths together in some way, it only drives the subpixels differently, and for our eyes, it seems like the light of the subpixels have been combined to a specific color. As we have seen previously, if we zoom in on an LCD screen, we can differentiate the subpixels&#39; primary colors again. . If our LCD screen would only emit electromagnetic waves outside of the visible spectrum, it would be of little benefit to us humans. But visualizing bands that we aren&#39;t able to see is quite helpful! A well-known use case is thermal imaging. Here the long-infrared band is detected or sensed and visualized. The long-infrared band shows us the temperature variations, even if the objects aren&#39;t visible to us. The following figure shows us an example. . Normal RGB image (Image from Wikipedia) Infrared image (Image from Wikipedia) RGB vs. infrared image . Note: Note that the infrared image only focusses on a single band and visualizes it as a normal RGB image with an intensity scale next to it. . If we look at both the RGB and infrared images, we can combine them to get even more information! The combination would count as a multi-spectral image. We do not limit ourselves to three visible light bands and can gain even more insights. What bands are sensed depends on the given sensor and the desired use-case. For example, the Sentinel-2 satellite takes multi-spectral images with 13 bands in the visible, near-infrared, and short wave infrared part of the spectrum. The next post will take a closer look at how we can load and visualize these remote images. But, before we move on, let&#39;s summarize what we have learned so far. . Summary . We went from grayscale images with a single channel, to RGB images with three channels, to multi-spectral images with more than three channels. These multi-spectral images do not only focus on the visual-spectrum of electromagnetic waves but use even more bands. The main idea is that the information from different bands allows us to learn more about the object or scene. In our previous example, we were able to verify that the person had five fingers on his left hand, even if we weren&#39;t able to see it from the visual-spectrum of the light. For my master thesis, I hope that this additional information can be used in multi-spectral remote sensing images to increase neural networks&#39; accuracy and robustness further. . But before we dive deep into neural networks, we first need to understand how we can visualize and work with these multi-spectral images, which will be the goal of the next post. . Until then, have a productive time! :+1: . 1. For a more detailed comparison of additive vs. subtractive colors, see the blog post from thepapermillstore.com↩ .",
            "url": "https://kai-tub.github.io/master-thesis-blog/images/2020/09/16/images-with-channels.html",
            "relUrl": "/images/2020/09/16/images-with-channels.html",
            "date": " • Sep 16, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Introduction to grayscale images",
            "content": "About . Before we can dive into multi-spectral satellite images, I think a quick refresher on how images are encoded and represented in memory is a good starting point. . Binary encoding . Let&#39;s take a short recap of how classical computer vision images are encoded in memory. Internally a computer (ignoring quantum-computing) only works with binary numbers. A binary number is either a 0 or a 1, on or off. The value of such a binary number is called a bit. The smallest data-element is called a byte. A byte consists of 8 bits. There are different ways how we could use these 8 bits/1 byte to encode our data. The data we are trying to store/load defines how we interpret the data. If we want to only work with positive integers, we use an unsigned integer type. An unsigned integer with 8 bits can encode all numbers from 0$-$255. If all bits are 1, also called set, the value is 255. If all bits are 0 the corresponding value is 0.1 . Grayscale images . Images, like everything in a computer, are also only encoded in binary values. The most straightforward images are grayscale images. The possible colors of each pixel of a grayscale image can only range from black to gray to white, with all different gray shades in-between. Pixels are the basic elements of a picture. The word itself, pixel, is a combination of the words picture and element/cell. So an image consists of pixels, similar to how a brick wall consists of bricks. . Pixel Complete Image My weird analogy We can understand how simple 8-bit grayscale images are encoded with the knowledge of our previous simple encoding scheme. The 8-bit refers to the color-depth. It indicates how many bits are used per channel. We only have a single channel for a grayscale image, the colors range from black to white. (We will take a closer look at different channels in the next post.) For now, we note that our grayscale channel is encoded with 8-bits. Or, put differently, we use 8-bits for every pixel to show different shades of gray. With 8-bits, we can color each pixel in 256 (2⁸) different ways. . With the numpy and PIL library, we can easily create our own 8-bit grayscale image by merely changing the value of a byte. . #collapse import numpy as np from PIL import Image, ImageOps def to_grayscale_image(x): grayscale_8_bit_mode = &quot;L&quot; return Image.fromarray(x, mode=grayscale_8_bit_mode) def upscale_image(img, img_width=224, img_height=224): return img.resize((img_width, img_height), resample=Image.NEAREST) # PIL requires np arrays as input # Datatype is uint8, our unsigned int consisting of 8-bits # zero is our single byte/value with value 0 # -&gt; Array has a width and height of 1 zero = np.zeros((1, 1), dtype=np.uint8) img_values = { &quot;pixel_0&quot;: zero, &quot;pixel_64&quot;: zero + 64, &quot;pixel_192&quot;: zero + 192, &quot;pixel_255&quot;: zero + 255 } for name, value in img_values.items(): img = to_grayscale_image(value) img = upscale_image(img) bordered_img = ImageOps.expand(img, border=1, fill=&quot;black&quot;) # display(bordered_img) # To display in jupyter bordered_img.save(f&quot;2020-09-02/{name}.png&quot;) . . 0 64 192 255 Visualization of different 8-bit grayscale pixel values Until now, we did not care about the resolution of our images. The resolution defines how many pixels we use to visualize the object. A resolution of 1 corresponds to a single pixel. But, with a single-pixel picture, we cannot retain a lot of information. As shown above, we could only create a single shade of gray. Let&#39;s increase our resolution for the following images to a size of 224 pixels x 224 pixels. With more pixels, we can show more levels of detail. . Now we can extend our previous code to draw gradients! . #collapse zeros = np.zeros((224, 224), dtype=np.uint8) x_gradient = np.arange(0, 224, dtype=np.uint8).reshape(1, 224) y_gradient = np.arange(0, 224, dtype=np.uint8).reshape(224, 1) # Using numpy&#39;s broadcasting x_grad_2d = zeros + x_gradient y_grad_2d = zeros + y_gradient sum_grad_2d = x_gradient + y_gradient diff_grad_2d = x_gradient - y_gradient # Convert to a grayscale image as before # and save or show files . . Visualization of different 8-bit grayscale images If we don&#39;t limit ourselves to simple mathematical operations, we can show images with great detail. . Typical test image . Important: Even if these images reveal a lot of information to us humans, in the end, they are only stored as 0s and 1s on the computer. . The pepper&#39;s image consists of the following values. Each value is saved as a single byte on disk. . array([[ 71, 96, 92, ..., 136, 132, 127], [ 87, 119, 113, ..., 181, 176, 170], [ 83, 114, 111, ..., 178, 174, 166], ..., [ 92, 120, 108, ..., 191, 198, 198], [ 88, 124, 104, ..., 202, 198, 194], [ 78, 126, 106, ..., 200, 193, 188]], dtype=uint8) . Increasing the number of pixels (resolution) allows us to encode more details. The color-depth shows us how many bits we use per channel to encode a color. Our previous 8-bit grayscale pixel can, therefore, encode 256 different shades of gray. With a higher color-depth, we have access to more shades. But what is when we want to enrich our image with colors? . How to add colors to our image and how remote sensing images are different will be the topic of the next blog post! . Until then, have a productive time! :+1: . 1. A quick refresher on how to translate binary numbers to unsigned integers can be found on ryanstutorials↩ .",
            "url": "https://kai-tub.github.io/master-thesis-blog/images/2020/09/02/introduction.html",
            "relUrl": "/images/2020/09/02/introduction.html",
            "date": " • Sep 2, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Check out my main About me page here: . https://kai-tub.github.io/about .",
          "url": "https://kai-tub.github.io/master-thesis-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kai-tub.github.io/master-thesis-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}